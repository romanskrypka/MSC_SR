* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    height: 1200px;
}

.container {
    display: flex;
    justify-content: center;
}

.example {
    display: flex;
    justify-content: space-around;
    /*justify-content: flex-start;*/

    width: 800px;
    margin: 50px 0;
    background-color: #D6E9FE;
}

.item img {
    display: block;
}


/*POSITION - ОТНОСИТЕЛЬНОЕ ПОЗИЦИОНИРОВАНИЕ*/
/*position позволяет менять схему расположения конкретного элемента.*/
/*Значение данного свойства по умолчанию – static.*/
/*Если значение данного свойства отлично от static, то это позиционированный элемент.*/
/*Относительное позиционирование расставляет элементы по странице относительно их исходного места.*/
/*С помощью свойств top и left или bottom и right задается новое месторасположение элементов*/
.item-relative {/**/
    position: relative;/*position: relative; трансформирует элемент в позиционированный*/
    top: -30px;/*top, позволяют определить, насколько далеко элемент располагается от своей первоначальной позиции.*/
    left: -30px;/*left - тоже самое что и top делает и left. Это все равно что задать для элемента координаты (x, y)*/
    /*значения top и left никак не влияют на элементы вокруг или родительский элемент.*/
    /*Все остальное будет отображаться так, как если бы .item-relative располагался в своей первоначальной позиции.*/
    /*эти свойства работают также и с отрицательными значениями. Например, top: -30px; дает такой же эффект, что и bottom: 30px;*/
}



/*POSITION - АБСОЛЮТНОЕ ПОЗИЦИОНИРОВАНИЕ*/
/*это почти то же самое, что и относительное позиционирование,*/
/*с тем лишь отличием, что смещение зависит от всего окна браузера, а не от первоначальной позиции элемента.*/
/*Так как больше не существует никакого взаимодействия со статическим потоком страницы,*/
/*можно считать это наиболее неавтоматизированным способом расположения элемента.*/
/**/
/*Координаты для абсолютных элементов всегда соотносятся с ближайшим контейнером – позиционированным элементом.*/
/*Элемент становится относительным для браузера только в том случае, когда ни один из его потомков не позиционирован.*/
/**/
.item-absolute {/*изображение будет находиться в левом верхнем углу окна*/
    position: absolute;/**/
    top: 10px;/**/
    left: 10px;/**/
    /*Можно также назначить значения bottom или right, чтобы лучше понять, что происходит.*/
}

/**/
/*можно изменить систему координат абсолютно-позиционированного элемента.*/
/*оно будет относится к какому-либо другому элементу в статичном потоке страницы*/
/*Координаты для абсолютных элементов всегда соотносятся с ближайшим контейнером – позиционированным элементом*/
/*Элемент становится относительным для браузера только в том случае, когда ни один из его потомков не позиционирован.*/
/*Поэтому, если мы поменяем родительский элемент .item-absolute так,*/
/*чтобы он стал относительно позиционированным,*/
/*он должен появится в верхнем левом углу именно этого элемента.*/
.absolute {
    position: relative;
  }
/*Элемент .absolute div находится в обычном потоке страницы, и мы можем двигать .item-absolute, как хотим.*/
/**/


/*POSITION - ФИКСИРОВАННОЕ ПОЗИЦИОНИРОВАНИЕ*/
/*Фиксированное позиционирование имеет много общего с абсолютным позиционированием:*/
/*элемент выбирается из нормального потока страницы, а система координат соотносится с всем окном браузера.*/
/*Ключевая разница в том, что фиксированные элементы не скроллятся вместе с остальной страницей*/
/*Обновим наш третий пример, так чтобы там появилось фиксированное позиционирование:*/
.item-fixed {
    position: fixed;
    bottom: 0;
    right: 0;
  }
/*Это поместит синее изображение в правый нижний угол экрана.*/

/**/
/**/
/**/





/**/