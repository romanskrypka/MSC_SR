"use strict";

//! Hidden_return - скрытый return (возврат)
//Если забыть указать return в функции явным образом, то джаваскрипт скрыто вставит return undefined. 
//Слово скрыто в данном контексте обозначает что-то, чего нет в коде, но чье существование подразумевается.
//В этой функции нигде нет строчки return undefined, но тем не менее она вернет undefined, 
//потому что в теле функции отсутствует явный return:
var sum = function sum(a, b) {
  a + b;
};

console.log(sum(1, 2)); // undefined
//Стрелочные функции позволяют нам использовать скрытый return вместо явного return:

var sum1 = function sum1(a, b) {
  return a + b;
};

console.log(sum1(1, 2)); // 3
//?Почему второй пример работает, а первый нет? 
//В обоих отсутствует ключевое слово return, но один пример работает, а другой возвращает undefined. Причина — в скрытом ретерне.
//Чтобы скрытый return сработал должны выполняться следующие условия:
//1️⃣ Функция должна быть стрелочной.
//2️⃣ Тело функции должно помещаться на одной линии.
//3️⃣ Нужно убрать фигурные скобки {} и return.
//Когда все эти условия выполняются, то функция скрытым образом будет возвращать результат выполненного кода в теле функции.
//Посмотрим на пример, использующий явный return:

var isHighRated = function isHighRated(imdbScore) {
  return imdbScore > 8;
};

var isHighRated1 = function isHighRated1(imdbScore) {
  return imdbScore > 8;
};

console.log(isHighRated());
console.log(isHighRated1()); //Синтаксис может показаться странным, но стоит к нему привыкнуть, как уже невозможно будет представить себе программирование 
//на джаваскрипте без него. Этот код можно прочитать так: «функция isHightRated принимает imdbScore и возвращает 
//результат выражения imdbScore > 8».
//Ранее мы уже узнали, что для функций с одним параметром можно не использовать круглые скобки (), 
//поэтому последний код можно сократить еще больше:

var isHighRated2 = function isHighRated2(imdbScore) {
  return imdbScore > 8;
};

console.log(isHighRated2()); //И это самый короткий (и одновременно очень понятный) способ записи подобной функции!
//? Как работать со скрытым return?
//Скрытый return отсутствует в коде явным образом, но подразумевается
//Намеренный скрытый return возможен только в стрелочных функциях
//Скрытый return позволяет опустить слово return и фигурные скобки
//Скрытый return доступен только для однострочных стрелочных функций
//В обычных функциях скрытый return возвращает только undefined
//! Practice - 60
//Перепишите функцию triple без использования return.

var value2 = 5;

function triple(value2) {
  return value2 * 3;
}

triple(2); // 6

triple(3); // 9

var triple2 = function triple2(value2) {
  return value2 * 3;
}; //! Practice - 61
//Напишите функцию multiply без использования return, чтобы она возвращала результат умножения двух своих параметров.


var multiply = function multiply(a, b) {
  return a * b;
}; //! Колбэки без return
//Кола без сахара, пиво без алкоголя, кофе без кофеина, колбэки без return. 
//Если вы следуете по этой дорожке, то самое время снова проведать методы массивов, где любят собираться колбэки.
//Давайте перепишем примеры из прошлых уроков с использованием стрелочных функций и скрытого return.
//Начнем с фильтра, который, напомним, изначально выглядел так:


var imdbScores = [8.2, 6.3, 8.8, 5.8, 9.1];
var getHighRated1 = imdbScores.filter(function (imdbScore) {
  return imdbScore > 8;
}); //С помощью стрелочной функции и скрытого return можно существенно сократить количество кода и даже сделать его более понятным:

var getHighRated2 = imdbScores.filter(function (imdbScore) {
  return imdbScore > 8;
}); //Подобную запись можно прочитать как «фильтруем оценки, чтобы оценка была выше 8».
//Самая распространенная ошибка — увлекаться сокращениями и писать scores.filter(score > 8), но такой код не сработает, 
//потому что сначала нужно передать в колбэк параметр score, затем обозначить стрелочную функцию через =>, 
//и только после этого возвращать тело функции score > 8.
//Следом перепишем метод .find, который, если забыли, возвращает первый элемент массива, соответствующий условию:

var testnets = ["Ropsten", "Kovan", "Rinkeby", "Goerli"];
var result2 = testnets.find(function (testnet) {
  return testnet === "Rinkeby";
});
console.log(result2); // "Rinkeby"
//С переделанным колбэком .find будет выглядеть так:

var result3 = testnets.find(function (testnet) {
  return testnet === "Rinkeby";
}); //Мы можем так же перевести этот код на человеческий язык так: «в массиве testnets найди testnet со значением Rinkeby».
//Наконец, отрефакторим .map, но сперва напомним его канонический вариант:

var numbers = [1, 2, 3, 4];
var doubled3 = numbers.map(function (number) {
  return number * 2;
});
console.log(doubled3); // [2, 4, 6, 8]
//Доработаем колбэк в одну строку и получим:

var doubled4 = numbers.map(function (number) {
  return number * 2;
}); //Такой код можно прочитать как «создай новый массив на основе numbers, где каждое число будет умножено на 2».
//? Как работать с Колбэком без return
//Нет ни одной причины не писать колбэки на стрелочных функциях
//Большинство колбэков помещается в одну строку для скрытого return
//Если забыть указать параметр и стрелку, то колбэк не сработает
//Методы, использующие стрелочный колбэк легко «читаются» людьми
//В стрелочных функциях с фигурными скобками нужен явный return