function sum (a, b) {
   return a + b;
}

let a = 15;
let b = 20;
let z = a + b;

console.log(sum(a, z));// вернёт 50
console.log(sum(10, 55));// вернёт 65

//! Practice - 1
// Напишите функцию sum, которая бы возвращала сумму a и x. 
let x = z + sum(a, z);

function sum1 () {
   return a + x;
}

console.log(sum1(a, x));


//! Practice - 2
//Напишите функцию multiply, чтобы она возвращала результат умножения a на b.
function sum2 (a, b) {
   return console.log(a * b);
}

//? Как создавать простые функции?
//Функция определяется с использованием ключевого слова function
//Функция вызывается подстановкой круглых скобок к имени функции
//Ключевое слово return контролирует, какое значение вернет функция
//Любая функция что-то возвращает, по дефолту это значение undefined
//return также прерывает выполнение кода функции и выходит из нее


//! Строки
//Строки в JS создаются с использованием одиночных или двойных кавычек, между которыми нет никакой разницы:
//"это строка"
//'и это строка'
//У любой есть свойство length, возвращающее длину строки. Например, "строка".length вернет 6.

//А вот как мы можем получить длину строки, сохраненной в переменную:
let text = "JavaScript";
let text13 = "JavaScript13";
text.length; // 10
console.log(text.length);

//У строк также есть методы, например, .toLowerCase() и .toUpperCase(), возвращающие новые строки, 
//состоящие из всех строчных или всех заглавных букв. Исходное значение при этом остается неизменным:
text.toLowerCase() // "javascript"
"JavaScript".toUpperCase() // "JAVASCRIPT"


//В отличие от свойств, которые являются уже вычисленными заранее значениями, для использования методов, 
//выполняющих определенные действия, нужно их применить. Именно поэтому в конце методов мы используем скобки, 
//таким образом «вызывая» их, а свойство length используем без скобок.

//? Как работать со строками?
//Строки можно создавать с помощью двойных или одиночных кавычек
//Длина строки хранится в свойстве .length
//Метод .toUpperCase() конвертирует все буквы в заглавные
//Метод .toLowerCase() конвертирует все буквы в строчные
//Для вызова методов нужны скобки, чтобы они могли выполниться
//Для доступа к свойствам скобки не нужны — они заранее известны


//! Practice - 3
//Напишите функцию getCharCount, чтобы она возвращала количество символов в принятом параметре str.
function getCharCount (str) {
   return str.length;
}
console.log(getCharCount(text));
console.log(getCharCount(text13));


//! Practice - 4
//Напишите функцию shoutMyName, чтобы она возвращала значение, переданное в параметре name, CapsLk.
let name = "Roman";
function shoutMyName (name) {
   return name.toUpperCase();
}
console.log(shoutMyName(text13));

//! Practice - 5
//Напишите функцию lowKey, чтобы она возвращала значение, переданное в параметре name, строчными буквами.
function lowKey (name) {
   return name.toLowerCase();
}

console.log(lowKey (text13 + " " + text));

//! Получение символов
//Доступ к конкретному символу строки осуществляется через индекс (начиная с 0) внутри квадратных скобок.

//Рассмотрим на примере переменной lang, имеющей значение "JavaScript". Вот как можно получить первый, второй и третий символы:
let lang = "JavaScript";
lang[0]; // "J"
lang[1]; // "a"
lang[2]; // "v"

//Если напрямую вводить выражение в консоль браузера, то консоль всегда будет показывать нам возвращаемое значение. 
//Если это выражение является частью функции или используется в коде страницы, 
//то вывести его в консоль можно с помощью метода console.log() (напр. console.log(lang[0])).
console.log(lang[0]);

//Внутри квадратных скобок может быть динамическое значение с использованием других выражений. 
//Чтобы получить второй символ с конца, можно использовать информацию о длине строки:
lang[lang.length-2] // "p"
console.log(lang[lang.length-2]);

//Обратите внимание, что lang[lang.length] выдал бы undefined, потому что индексы начинаются с нуля, 
//и у строки из 10 символов позицией последнего символа будет 9.

//? Как получать символы из строк?
//Номер индекса в квадратных скобках выдает символ из этой позиции
//Индексы начинаются с нулевого значения; у первого символа индекс 0
//Внутри квадратных скобок можно использовать динамические значения


//! Practice - 6
//Напишите функцию getFirstChar, чтобы она возвращала первый символ строки, передаваемой в параметре name.
function getCharCount1 (name) {
   return name[0];
}
console.log(getCharCount1(name));


//! Practice - 7
//Напишите функцию getLastChar, чтобы она возвращала последний символ строки, передаваемой в параметре name.
function getCharCount2 (name) {
   return name[name.length - 1];
}
console.log(getCharCount2(name));


//! Метод substring()
//В программировании часть строки называется подстрокой. Например, "Arc" является подстрокой строки "Arcteryx", 
//потому что одну можно получить из другой, отбросив последние 5 символов.

//При работе со строками нам часто требуется получить только часть символов строки, а не всю строку целиком. 
//Для этого используется метод substring().

//У каждого метода есть своя сигнатура, показывающая, какие параметры может принимать данный метод. 
//Сигнатура метода подстроки выглядит так:

//str.substring(indexStart, indexEnd)
//Это значит, что при вызове метода substring() нужно передать ему два аргумента — для первого символа, 
//включаемого в подстроку, и последнего, не включаемого в нее.

//Примеры использования:

console.log("GORE-TEX".substring(5)); // "TEX"
console.log("Helly Hansen".substring(0, 5)); // "Helly"
console.log("The North Face".substring(4, 9)); // "North"
//В первом примере использован только один аргумент indexStart. Второй параметр является необязательным и, 
//если его не указывать, будет использовано дефолтное значение равное длине строки (в нашем случае это число 8).

//? Как работать с методом substring?
//Подстрокой называется любая часть исходной строки
//Подстрока получается с помощью метода .substring()
//У метода подстроки два параметра – начальный и конечный индексы
//Начальный символ включается в подстроку и является обязательным
//Конечный символ не включается в подстроку и является опциональным


//! Practice - 8
//Напишите функцию skipFirstChar, чтобы она возвращала все символы кроме первого из строки в параметре text.
let texted = "Roman Gold13";
function skipFirstChar2 (texted) {
   return texted.substring(1);
}
console.log(skipFirstChar2(texted));


//! Practice - 9
function getFirstTen(text) {
   console.log(text.substring(0, 10)); // введите что-нибудь в браузере и проверьте консоль
}
getFirstTen(text);


//! Оператор +
//Оператор + ведет себя по-разному в зависимости от того, в сочетании с какими типами данных используется. 
//С числами плюс работает как оператор сложения, например, 1 + 3 вернет число 4.

//Также с помощью плюса можно объединять строки. Процесс склейки нескольких строк в одну называется конкатенацией. 
//Например, "Hello" + "World" в результате вернет "HelloWorld".

//Соединим три строки, одна из которых пробел:

let first1 = "Gleb";
let second1 = "Kostin";
let name1 = first1 + " " + second1; // "Gleb Kostin"
//Бывает, что нужно слепить строку на основе уже имеющейся. 
//В этом случае можно использовать оператор += для более короткой записи:

let name2 = "Gleb";
name2 += " Kostin"; // то же самое, что и name = name + " Kostin"
console.log(name2);

//? Как работать с оператором + ?
//Действие оператора + зависит от типа используемых с ним данных
//Помимо сложения чисел + используется для объединения строк
//Когда значение добавляется к уже существующему можно использовать оператор +=
//+= также может использоваться как с числами, так и со строками


//! Practice - 10
//Напишите функцию dateConcat, чтобы она возвращала строку, состоящую из числа и названия месяца.
let day = "Среда";
let month = "Октябрь";
function dateConcat2 (day, month) {
   return day += month;
}
console.log(dateConcat2(day, month));


//! Practice - 11
//Напишите функцию getExcerpt, чтобы она возвращала первые 10 символов из переданной ей строки с многоточием в конце.
let texted1 = "Индустриализация";
function getExcerpt2 (texted1) {
   return texted1.substring(0, 10) + "...";
}
console.log(getExcerpt2(texted1));


//! Шаблонные строки



