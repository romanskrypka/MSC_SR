//
//*TODO
//*
//*!
//*?
/* ... */

function sumA(x1, y) {
  return x1 + y;
  console.log(""); // эта часть никогда не будет выполнена так как функция остановится на инструкции на второй строке
}

function multiply(x1, y) {
  return x1 * y;
}

let x1 = 99;
let y = 61;
let z = 9;
let a = 3;

console.log(sumA(x1, y));
console.log(multiply(x1, y));

//? Как создавать простые функции?
// Функция определяется с использованием ключевого слова function.
// Функция вызывается подстановкой круглых скобок к имени функции.
// Ключевое слово return контролирует, какое значение вернёт функция.
// Любая функция что-то возвращает, по дефолту это значение undefined.
// return также прерывает выполнение кода функции и выходит из неё.

//! Practice - 1
// Напишите функцию sum, которая бы возвращала сумму a и x.
let x = z + sumA(x1, y);

function sum1() {
  return a + x;
}

console.log(sum1(a, x));

//! Practice - 2
//Напишите функцию multiply, чтобы она возвращала результат умножения a на b.
function sum2(a, b) {
  return console.log(a * b);
}

//! Строки
// Строки в JS создаются с использованием одиночных или двойных кавычек, между которыми нет никакой разницы: "это строка" 'и это строка'
// У любой строки есть свойство length, возвращающее длину строки. Например, "строка".length вернет 6.

let textA = "7a7b7c7d7e7f7g7h7i7j7k7l";
console.log(textA.length);

//У строк также есть методы, например, .toLowerCase() и .toUpperCase(), возвращающие новые строки,
//состоящие из всех строчных или всех заглавных букв. Исходное значение при этом остается неизменным:
console.log(textA.toUpperCase()); // "javascript"
console.log(textA.toLowerCase());
console.log("JavaScript".toUpperCase()); // "JAVASCRIPT"

//В отличие от свойств, которые являются уже вычисленными заранее значениями, для использования методов,
//выполняющих определенные действия, нужно их применить. Именно поэтому в конце методов мы используем скобки,
//таким образом «вызывая» их, а свойство length используем без скобок.

//? Как работать со строками?
//Строки можно создавать с помощью двойных или одиночных кавычек
//Длина строки хранится в свойстве .length
//Метод .toUpperCase() конвертирует все буквы в заглавные
//Метод .toLowerCase() конвертирует все буквы в строчные
//Для вызова методов нужны скобки, чтобы они могли выполниться
//Для доступа к свойствам скобки не нужны — они заранее известны

//
//*TODO
//*
//*!
//*?
/* ... */

let rqw = 1000;

//! Practice 3
// Напишите функцию getCharCount, чтобы она возвращала количество символов в принятом параметре str.
function getCharCount(str) {
  return str.length;
}

//! Practice 4
// Напишите функцию shoutMyName, чтобы она возвращала значение, переданное в параметре name, капсом.
function shoutMyName(name) {
  return name.toUpperCase;
}

//! Practice 5
// Напишите функцию lowKey, чтобы она возвращала значение, переданное в параметре name, строчными буквами.
function LowKey(name) {
  return name.toLowerCase;
}

//! Получение символов
// Доступ к конкретному символу строки осуществляется через индекс (начиная с 0) внутри квадратных скобок.
// Рассмотрим на примере переменной lang, имеющей значение "JavaScript". Вот как можно получить первый, второй и третий символы:
let lang = "JavaScript";
console.log(lang.length); // 6
console.log(lang[0]); // "J"
console.log(lang[1]); // "a"
console.log(lang[2]); // "V"

// Если напрямую вводить выражение в консоль браузера, то консоль всегда будет показывать нам возвращаемое значение.
// Если это выражение является частью функции или используется в коде страницы,
// то вывести его в консоль можно с помощью метода console.log()(напр.console.log(lang[0])).

// Внутри квадратных скобок может быть динамическое значение с использованием других выражений.
// Чтобы получить второй символ с конца, можно использовать информацию о длине строки:

console.log(lang[lang.length - 1]);
console.log(lang[lang.length - 2]);
// Обратите внимание, что lang[lang.length] выдал бы undefined,
// потому что индексы начинаются с нуля, и у строки из 10 символов позицией последнего символа будет 9.

//? Как работать с индексами?
// Номер индекса в квадратных скобках выдает символ из этой позиции
// Индексы начинаются с нулевого значения; у первого символа индекс 0
// Внутри квадратных скобок можно использовать динамические значения

//! Practice 6
// Напишите функцию getFirstChar, чтобы она возвращала первый символ строки, передаваемой в параметре name.
function getFirstChar(name) {
  return name[0];
}

//! Practice 7
// Напишите функцию getLastChar, чтобы она возвращала последний символ строки, передаваемой в параметре name.
function getLastChar(nama) {
  return name[name.length - 1];
}

//! Метод substring()
// В программировании часть строки называется подстрокой. Например, "Arc" является подстрокой строки "Arcteryx",
// потому что одну можно получить из другой, отбросив последние 5 символов.

// При работе со строками нам часто требуется получить только часть символов строки, а не всю строку целиком.
// Для этого используется метод substring().

// У каждого метода есть своя сигнатура, показывающая, какие параметры может принимать данный метод.
//*TODO Сигнатура метода подстроки выглядит так: str.substring(indexStart, indexEnd)

// Это значит, что при вызове метода substring() нужно передать ему два аргумента — для первого символа,
// включаемого в подстроку, и последнего, не включаемого в нее.

console.log("GORE-TEX".substring(5)); // "TEX"
console.log("Helly Hansen".substring(0, 5)); // "Helly"
console.log("The North Face".substring(4, 9)); // "North"

// В первом примере использован только один аргумент indexStart. Второй параметр является необязательным и,
// если его не указывать, будет использовано дефолтное значение равное длине строки (в нашем случае это число 8).

//? Как работать с Методом substring()?
// Подстрокой называется любая часть исходной строки
// Подстрока получается с помощью метода .substring()
// У метода подстроки два параметра – начальный и конечный индексы
// Начальный символ включается в подстроку и является обязательным
// Конечный символ не включается в подстроку и является опциональным

//! Practice 8
// Напишите функцию skipFirstChar, чтобы она возвращала все символы кроме первого из строки в параметре text.

//! Practice 9
// Этот челлендж для разнообразия нужно будет выполнить в онлайн-песочнице codesandbox, где сразу можно видеть результат.

// Мы приготовили проект, содержащий несколько файлов, в числе которых файл helper.js, экспортирующий вспомогательную функцию,
// которую вам и предстоит дописать так, чтобы она возвращала 10 первых символов строки, переданной в параметре функции.

// Проверьте сами себя, попробовав вбить текст в поле.

// P.S. Не переживайте, если код внутри index.js покажется непонятным. Вы поймете его чуть позже, когда пройдете методы DOM.
